/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  VacationPolicy as PrismaVacationPolicy,
  User as PrismaUser,
} from "@prisma/client";

export class VacationPolicyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VacationPolicyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.vacationPolicy.count(args);
  }

  async vacationPolicies(
    args: Prisma.VacationPolicyFindManyArgs
  ): Promise<PrismaVacationPolicy[]> {
    return this.prisma.vacationPolicy.findMany(args);
  }
  async vacationPolicy(
    args: Prisma.VacationPolicyFindUniqueArgs
  ): Promise<PrismaVacationPolicy | null> {
    return this.prisma.vacationPolicy.findUnique(args);
  }
  async createVacationPolicy(
    args: Prisma.VacationPolicyCreateArgs
  ): Promise<PrismaVacationPolicy> {
    return this.prisma.vacationPolicy.create(args);
  }
  async updateVacationPolicy(
    args: Prisma.VacationPolicyUpdateArgs
  ): Promise<PrismaVacationPolicy> {
    return this.prisma.vacationPolicy.update(args);
  }
  async deleteVacationPolicy(
    args: Prisma.VacationPolicyDeleteArgs
  ): Promise<PrismaVacationPolicy> {
    return this.prisma.vacationPolicy.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.vacationPolicy
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
