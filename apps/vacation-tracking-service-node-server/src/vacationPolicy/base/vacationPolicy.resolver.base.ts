/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VacationPolicy } from "./VacationPolicy";
import { VacationPolicyCountArgs } from "./VacationPolicyCountArgs";
import { VacationPolicyFindManyArgs } from "./VacationPolicyFindManyArgs";
import { VacationPolicyFindUniqueArgs } from "./VacationPolicyFindUniqueArgs";
import { CreateVacationPolicyArgs } from "./CreateVacationPolicyArgs";
import { UpdateVacationPolicyArgs } from "./UpdateVacationPolicyArgs";
import { DeleteVacationPolicyArgs } from "./DeleteVacationPolicyArgs";
import { User } from "../../user/base/User";
import { VacationPolicyService } from "../vacationPolicy.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VacationPolicy)
export class VacationPolicyResolverBase {
  constructor(
    protected readonly service: VacationPolicyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VacationPolicy",
    action: "read",
    possession: "any",
  })
  async _vacationPoliciesMeta(
    @graphql.Args() args: VacationPolicyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VacationPolicy])
  @nestAccessControl.UseRoles({
    resource: "VacationPolicy",
    action: "read",
    possession: "any",
  })
  async vacationPolicies(
    @graphql.Args() args: VacationPolicyFindManyArgs
  ): Promise<VacationPolicy[]> {
    return this.service.vacationPolicies(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VacationPolicy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VacationPolicy",
    action: "read",
    possession: "own",
  })
  async vacationPolicy(
    @graphql.Args() args: VacationPolicyFindUniqueArgs
  ): Promise<VacationPolicy | null> {
    const result = await this.service.vacationPolicy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VacationPolicy)
  @nestAccessControl.UseRoles({
    resource: "VacationPolicy",
    action: "create",
    possession: "any",
  })
  async createVacationPolicy(
    @graphql.Args() args: CreateVacationPolicyArgs
  ): Promise<VacationPolicy> {
    return await this.service.createVacationPolicy({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VacationPolicy)
  @nestAccessControl.UseRoles({
    resource: "VacationPolicy",
    action: "update",
    possession: "any",
  })
  async updateVacationPolicy(
    @graphql.Args() args: UpdateVacationPolicyArgs
  ): Promise<VacationPolicy | null> {
    try {
      return await this.service.updateVacationPolicy({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VacationPolicy)
  @nestAccessControl.UseRoles({
    resource: "VacationPolicy",
    action: "delete",
    possession: "any",
  })
  async deleteVacationPolicy(
    @graphql.Args() args: DeleteVacationPolicyArgs
  ): Promise<VacationPolicy | null> {
    try {
      return await this.service.deleteVacationPolicy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: VacationPolicy
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
