/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Timesheet as PrismaTimesheet,
  User as PrismaUser,
} from "@prisma/client";
import { Timesheet } from "./Timesheet";

export class TimesheetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TimesheetCountArgs, "select">
  ): Promise<number> {
    return this.prisma.timesheet.count(args);
  }

  async timesheets(
    args: Prisma.TimesheetFindManyArgs
  ): Promise<PrismaTimesheet[]> {
    return this.prisma.timesheet.findMany(args);
  }
  async timesheet(
    args: Prisma.TimesheetFindUniqueArgs
  ): Promise<PrismaTimesheet | null> {
    return this.prisma.timesheet.findUnique(args);
  }
  async createTimesheet(
    args: Prisma.TimesheetCreateArgs
  ): Promise<PrismaTimesheet> {
    return this.prisma.timesheet.create(args);
  }
  async updateTimesheet(
    args: Prisma.TimesheetUpdateArgs
  ): Promise<PrismaTimesheet> {
    return this.prisma.timesheet.update(args);
  }
  async deleteTimesheet(
    args: Prisma.TimesheetDeleteArgs
  ): Promise<PrismaTimesheet> {
    return this.prisma.timesheet.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.timesheet
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async ApproveTimesheet(args: Timesheet): Promise<Timesheet> {
    throw new Error("Not implemented");
  }
  async RejectTimesheet(args: Timesheet): Promise<Timesheet> {
    throw new Error("Not implemented");
  }
}
