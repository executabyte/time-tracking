/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TimesheetService } from "../timesheet.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TimesheetCreateInput } from "./TimesheetCreateInput";
import { Timesheet } from "./Timesheet";
import { TimesheetFindManyArgs } from "./TimesheetFindManyArgs";
import { TimesheetWhereUniqueInput } from "./TimesheetWhereUniqueInput";
import { TimesheetUpdateInput } from "./TimesheetUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TimesheetControllerBase {
  constructor(
    protected readonly service: TimesheetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Timesheet })
  @nestAccessControl.UseRoles({
    resource: "Timesheet",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTimesheet(
    @common.Body() data: TimesheetCreateInput
  ): Promise<Timesheet> {
    return await this.service.createTimesheet({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        hoursWorked: true,
        id: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Timesheet] })
  @ApiNestedQuery(TimesheetFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Timesheet",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async timesheets(@common.Req() request: Request): Promise<Timesheet[]> {
    const args = plainToClass(TimesheetFindManyArgs, request.query);
    return this.service.timesheets({
      ...args,
      select: {
        createdAt: true,
        date: true,
        hoursWorked: true,
        id: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Timesheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Timesheet",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async timesheet(
    @common.Param() params: TimesheetWhereUniqueInput
  ): Promise<Timesheet | null> {
    const result = await this.service.timesheet({
      where: params,
      select: {
        createdAt: true,
        date: true,
        hoursWorked: true,
        id: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Timesheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Timesheet",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTimesheet(
    @common.Param() params: TimesheetWhereUniqueInput,
    @common.Body() data: TimesheetUpdateInput
  ): Promise<Timesheet | null> {
    try {
      return await this.service.updateTimesheet({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          hoursWorked: true,
          id: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Timesheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Timesheet",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTimesheet(
    @common.Param() params: TimesheetWhereUniqueInput
  ): Promise<Timesheet | null> {
    try {
      return await this.service.deleteTimesheet({
        where: params,
        select: {
          createdAt: true,
          date: true,
          hoursWorked: true,
          id: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/timesheet/:id/approve")
  @swagger.ApiOkResponse({
    type: Timesheet,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ApproveTimesheet(
    @common.Body()
    body: Timesheet
  ): Promise<Timesheet> {
    return this.service.ApproveTimesheet(body);
  }

  @common.Post("/timesheet/:id/reject")
  @swagger.ApiOkResponse({
    type: Timesheet,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async RejectTimesheet(
    @common.Body()
    body: Timesheet
  ): Promise<Timesheet> {
    return this.service.RejectTimesheet(body);
  }
}
